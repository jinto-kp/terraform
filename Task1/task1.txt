jinto123@ubuntu:~/Desktop/tf_test$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v4.65.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
jinto123@ubuntu:~/Desktop/tf_test$ terraform validate
Success! The configuration is valid.

jinto123@ubuntu:~/Desktop/tf_test$ terraform plan
data.aws_ami.amzlinux2: Reading...
data.aws_ami.amzlinux2: Read complete after 0s [id=ami-04008951c9ded5b67]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-04008951c9ded5b67"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "webserver-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web"
        }
      + tags_all                             = {
          + "Name" = "web"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "0993d032286e7cc65d7516b39dcfa9e17a472162"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_key_pair.webserver-key will be created
  + resource "aws_key_pair" "webserver-key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "webserver-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDCGoVltUmFWloMs2bWL3K4YS8Gix15kZJqFDh/G8Dja0G6eRQZnGIF6FVL/cavfkjMdNM/0gBgZkLtqHmYimNuVT9Fkmtx8kHrJUwTwOG3hyfjJIvmL6iaf2b02bkZj9ZEFeqi+ABaCozyhu4od1AzhITl7ebbnmlCk2eNpTRU+6Xig5bMtOgTl1iex6PI/jaHHY39RbApZkHMHabl5boqMvWH8h3t659BuKfyH9o1nK1jwrLW2pmqXPVnfkxpPwbZKxReoMFYHsR4bJOoB8kfjGYBAmtjbbj2qRQYlPxc1xjZWssis1Bqh6jXyJqyOfsqCbbOircJyJJJxQmTfPPcPFTzvPGNyid8ZrLBEjqEVQx8B3t0psyt/+xnpmBZmUujTfl81ydTg3X8yxK+m6U6CowYCTLV1Cg1VHpqsPbZQHuLYBn3odEe+ZsHX4HguOKa+8SrTi2SEVTjHycqAOGRBHs8/IYVv6xZBDTC03MbI9gMgQn2Qh7k0b2D8Rn8TuU= jinto123@ubuntu"
      + tags_all        = (known after apply)
    }

  # aws_security_group.my-secnew will be created
  + resource "aws_security_group" "my-secnew" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH traffic"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "test-SG"
        }
      + tags_all               = {
          + "Name" = "test-SG"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + private_ip = (known after apply)
  + public_ip  = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
jinto123@ubuntu:~/Desktop/tf_test$ terraform apply
data.aws_ami.amzlinux2: Reading...
data.aws_ami.amzlinux2: Read complete after 1s [id=ami-04008951c9ded5b67]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-04008951c9ded5b67"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "webserver-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "web"
        }
      + tags_all                             = {
          + "Name" = "web"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "0993d032286e7cc65d7516b39dcfa9e17a472162"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_key_pair.webserver-key will be created
  + resource "aws_key_pair" "webserver-key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "webserver-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDCGoVltUmFWloMs2bWL3K4YS8Gix15kZJqFDh/G8Dja0G6eRQZnGIF6FVL/cavfkjMdNM/0gBgZkLtqHmYimNuVT9Fkmtx8kHrJUwTwOG3hyfjJIvmL6iaf2b02bkZj9ZEFeqi+ABaCozyhu4od1AzhITl7ebbnmlCk2eNpTRU+6Xig5bMtOgTl1iex6PI/jaHHY39RbApZkHMHabl5boqMvWH8h3t659BuKfyH9o1nK1jwrLW2pmqXPVnfkxpPwbZKxReoMFYHsR4bJOoB8kfjGYBAmtjbbj2qRQYlPxc1xjZWssis1Bqh6jXyJqyOfsqCbbOircJyJJJxQmTfPPcPFTzvPGNyid8ZrLBEjqEVQx8B3t0psyt/+xnpmBZmUujTfl81ydTg3X8yxK+m6U6CowYCTLV1Cg1VHpqsPbZQHuLYBn3odEe+ZsHX4HguOKa+8SrTi2SEVTjHycqAOGRBHs8/IYVv6xZBDTC03MbI9gMgQn2Qh7k0b2D8Rn8TuU= jinto123@ubuntu"
      + tags_all        = (known after apply)
    }

  # aws_security_group.my-secnew will be created
  + resource "aws_security_group" "my-secnew" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH traffic"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "test-SG"
        }
      + tags_all               = {
          + "Name" = "test-SG"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + private_ip = (known after apply)
  + public_ip  = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.my-secnew: Creating...
aws_key_pair.webserver-key: Creating...
aws_key_pair.webserver-key: Creation complete after 0s [id=webserver-key]
aws_security_group.my-secnew: Creation complete after 2s [id=sg-03dc5450b0253ca43]
aws_instance.web: Creating...
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Still creating... [20s elapsed]
aws_instance.web: Still creating... [30s elapsed]
aws_instance.web: Provisioning with 'local-exec'...
aws_instance.web (local-exec): Executing: ["/bin/sh" "-c" "echo server private IP address is 172.31.20.134"]
aws_instance.web (local-exec): server private IP address is 172.31.20.134
aws_instance.web: Creation complete after 33s [id=i-00fccfbb7233748b6]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.

Outputs:

private_ip = "172.31.20.134"
public_ip = "52.77.254.133"
jinto123@ubuntu:~/Desktop/tf_test$ ssh ec2-user@52.77.254.133
The authenticity of host '52.77.254.133 (52.77.254.133)' can't be established.
ECDSA key fingerprint is SHA256:eZIxPplekpDiHV80Hj9e6wMc9mUFR7DWa3tS+DNRir0.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '52.77.254.133' (ECDSA) to the list of known hosts.

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
[ec2-user@ip-172-31-20-134 ~]$ sudo su -
[root@ip-172-31-20-134 ~]# curl 172.31.20.134
<h1>Welcome to MY Terraform</h1>
[root@ip-172-31-20-134 ~]# 
